#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17929
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SaltedButterWebsite.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="bsw")]
	public partial class PlaceSatedButterDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertPlace(Place instance);
    partial void UpdatePlace(Place instance);
    partial void DeletePlace(Place instance);
    partial void InsertAction(Action instance);
    partial void UpdateAction(Action instance);
    partial void DeleteAction(Action instance);
    partial void InsertSaltedButter(SaltedButter instance);
    partial void UpdateSaltedButter(SaltedButter instance);
    partial void DeleteSaltedButter(SaltedButter instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    #endregion
		
		public PlaceSatedButterDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["bswConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public PlaceSatedButterDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PlaceSatedButterDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PlaceSatedButterDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PlaceSatedButterDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Place> Places
		{
			get
			{
				return this.GetTable<Place>();
			}
		}
		
		public System.Data.Linq.Table<Action> Actions
		{
			get
			{
				return this.GetTable<Action>();
			}
		}
		
		public System.Data.Linq.Table<SaltedButter> SaltedButters
		{
			get
			{
				return this.GetTable<SaltedButter>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.T_PLACE")]
	public partial class Place : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PLC_ID;
		
		private string _PLC_NAME;
		
		private System.Nullable<byte> _TYP_ID;
		
		private string _PLC_ADDRESS1;
		
		private string _PLC_ADDRESS2;
		
		private string _PLC_CITY;
		
		private string _PLC_PC;
		
		private byte _CTR_ID;
		
		private double _PLC_LATITUDE;
		
		private double _PLC_LONGITUDE;
		
		private bool _PLC_ACTIVE;
		
		private EntitySet<Action> _T_ACTIONs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnTypeIdChanging(System.Nullable<byte> value);
    partial void OnTypeIdChanged();
    partial void OnAddress1Changing(string value);
    partial void OnAddress1Changed();
    partial void OnAddress2Changing(string value);
    partial void OnAddress2Changed();
    partial void OnCityChanging(string value);
    partial void OnCityChanged();
    partial void OnPostalCodeChanging(string value);
    partial void OnPostalCodeChanged();
    partial void OnCountryIdChanging(byte value);
    partial void OnCountryIdChanged();
    partial void OnLatitudeChanging(double value);
    partial void OnLatitudeChanged();
    partial void OnLongitudeChanging(double value);
    partial void OnLongitudeChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    #endregion
		
		public Place()
		{
			this._T_ACTIONs = new EntitySet<Action>(new Action<Action>(this.attach_T_ACTIONs), new Action<Action>(this.detach_T_ACTIONs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="PLC_ID", Storage="_PLC_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._PLC_ID;
			}
			set
			{
				if ((this._PLC_ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._PLC_ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="PLC_NAME", Storage="_PLC_NAME", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._PLC_NAME;
			}
			set
			{
				if ((this._PLC_NAME != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._PLC_NAME = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="TYP_ID", Storage="_TYP_ID", DbType="TinyInt")]
		public System.Nullable<byte> TypeId
		{
			get
			{
				return this._TYP_ID;
			}
			set
			{
				if ((this._TYP_ID != value))
				{
					this.OnTypeIdChanging(value);
					this.SendPropertyChanging();
					this._TYP_ID = value;
					this.SendPropertyChanged("TypeId");
					this.OnTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="PLC_ADDRESS1", Storage="_PLC_ADDRESS1", DbType="NVarChar(100)")]
		public string Address1
		{
			get
			{
				return this._PLC_ADDRESS1;
			}
			set
			{
				if ((this._PLC_ADDRESS1 != value))
				{
					this.OnAddress1Changing(value);
					this.SendPropertyChanging();
					this._PLC_ADDRESS1 = value;
					this.SendPropertyChanged("Address1");
					this.OnAddress1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="PLC_ADDRESS2", Storage="_PLC_ADDRESS2", DbType="NVarChar(100)")]
		public string Address2
		{
			get
			{
				return this._PLC_ADDRESS2;
			}
			set
			{
				if ((this._PLC_ADDRESS2 != value))
				{
					this.OnAddress2Changing(value);
					this.SendPropertyChanging();
					this._PLC_ADDRESS2 = value;
					this.SendPropertyChanged("Address2");
					this.OnAddress2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="PLC_CITY", Storage="_PLC_CITY", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string City
		{
			get
			{
				return this._PLC_CITY;
			}
			set
			{
				if ((this._PLC_CITY != value))
				{
					this.OnCityChanging(value);
					this.SendPropertyChanging();
					this._PLC_CITY = value;
					this.SendPropertyChanged("City");
					this.OnCityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="PLC_PC", Storage="_PLC_PC", DbType="NVarChar(10)")]
		public string PostalCode
		{
			get
			{
				return this._PLC_PC;
			}
			set
			{
				if ((this._PLC_PC != value))
				{
					this.OnPostalCodeChanging(value);
					this.SendPropertyChanging();
					this._PLC_PC = value;
					this.SendPropertyChanged("PostalCode");
					this.OnPostalCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="CTR_ID", Storage="_CTR_ID", DbType="TinyInt NOT NULL")]
		public byte CountryId
		{
			get
			{
				return this._CTR_ID;
			}
			set
			{
				if ((this._CTR_ID != value))
				{
					this.OnCountryIdChanging(value);
					this.SendPropertyChanging();
					this._CTR_ID = value;
					this.SendPropertyChanged("CountryId");
					this.OnCountryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="PLC_LATITUDE", Storage="_PLC_LATITUDE", DbType="Float NOT NULL")]
		public double Latitude
		{
			get
			{
				return this._PLC_LATITUDE;
			}
			set
			{
				if ((this._PLC_LATITUDE != value))
				{
					this.OnLatitudeChanging(value);
					this.SendPropertyChanging();
					this._PLC_LATITUDE = value;
					this.SendPropertyChanged("Latitude");
					this.OnLatitudeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="PLC_LONGITUDE", Storage="_PLC_LONGITUDE", DbType="Float NOT NULL")]
		public double Longitude
		{
			get
			{
				return this._PLC_LONGITUDE;
			}
			set
			{
				if ((this._PLC_LONGITUDE != value))
				{
					this.OnLongitudeChanging(value);
					this.SendPropertyChanging();
					this._PLC_LONGITUDE = value;
					this.SendPropertyChanged("Longitude");
					this.OnLongitudeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="PLC_ACTIVE", Storage="_PLC_ACTIVE", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._PLC_ACTIVE;
			}
			set
			{
				if ((this._PLC_ACTIVE != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._PLC_ACTIVE = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Place_Action", Storage="_T_ACTIONs", ThisKey="ID", OtherKey="PlaceId")]
		internal EntitySet<Action> Actions
		{
			get
			{
				return this._T_ACTIONs;
			}
			set
			{
				this._T_ACTIONs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_T_ACTIONs(Action entity)
		{
			this.SendPropertyChanging();
			entity.Place = this;
		}
		
		private void detach_T_ACTIONs(Action entity)
		{
			this.SendPropertyChanging();
			entity.Place = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.T_ACTION")]
	public partial class Action : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ACT_ID;
		
		private int _USR_ID;
		
		private System.Nullable<int> _PLC_ID;
		
		private System.Nullable<byte> _CAT_ID;
		
		private byte _STS_ID;
		
		private System.DateTime _ACT_CREATION_DATE;
		
		private System.Nullable<System.DateTime> _ACT_PROCESSING_DATE;
		
		private System.Nullable<int> _EXT_ID;
		
		private EntityRef<Place> _T_PLACE;
		
		private EntityRef<SaltedButter> _T_SALTED_BUTTER;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnPlaceIdChanging(System.Nullable<int> value);
    partial void OnPlaceIdChanged();
    partial void OnCategoryIdChanging(System.Nullable<byte> value);
    partial void OnCategoryIdChanged();
    partial void OnStatusIdChanging(byte value);
    partial void OnStatusIdChanged();
    partial void OnCreationDateChanging(System.DateTime value);
    partial void OnCreationDateChanged();
    partial void OnProcessingDateChanging(System.Nullable<System.DateTime> value);
    partial void OnProcessingDateChanged();
    partial void OnDetailIdChanging(System.Nullable<int> value);
    partial void OnDetailIdChanged();
    #endregion
		
		public Action()
		{
			this._T_PLACE = default(EntityRef<Place>);
			this._T_SALTED_BUTTER = default(EntityRef<SaltedButter>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="ACT_ID", Storage="_ACT_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ACT_ID;
			}
			set
			{
				if ((this._ACT_ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ACT_ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="USR_ID", Storage="_USR_ID", DbType="Int NOT NULL")]
		public int UserId
		{
			get
			{
				return this._USR_ID;
			}
			set
			{
				if ((this._USR_ID != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._USR_ID = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="PLC_ID", Storage="_PLC_ID", DbType="Int")]
		public System.Nullable<int> PlaceId
		{
			get
			{
				return this._PLC_ID;
			}
			set
			{
				if ((this._PLC_ID != value))
				{
					this.OnPlaceIdChanging(value);
					this.SendPropertyChanging();
					this._PLC_ID = value;
					this.SendPropertyChanged("PlaceId");
					this.OnPlaceIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="CAT_ID", Storage="_CAT_ID", DbType="TinyInt")]
		public System.Nullable<byte> CategoryId
		{
			get
			{
				return this._CAT_ID;
			}
			set
			{
				if ((this._CAT_ID != value))
				{
					this.OnCategoryIdChanging(value);
					this.SendPropertyChanging();
					this._CAT_ID = value;
					this.SendPropertyChanged("CategoryId");
					this.OnCategoryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="STS_ID", Storage="_STS_ID", DbType="TinyInt NOT NULL")]
		public byte StatusId
		{
			get
			{
				return this._STS_ID;
			}
			set
			{
				if ((this._STS_ID != value))
				{
					this.OnStatusIdChanging(value);
					this.SendPropertyChanging();
					this._STS_ID = value;
					this.SendPropertyChanged("StatusId");
					this.OnStatusIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="ACT_CREATION_DATE", Storage="_ACT_CREATION_DATE", DbType="DateTime NOT NULL")]
		public System.DateTime CreationDate
		{
			get
			{
				return this._ACT_CREATION_DATE;
			}
			set
			{
				if ((this._ACT_CREATION_DATE != value))
				{
					this.OnCreationDateChanging(value);
					this.SendPropertyChanging();
					this._ACT_CREATION_DATE = value;
					this.SendPropertyChanged("CreationDate");
					this.OnCreationDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="ACT_PROCESSING_DATE", Storage="_ACT_PROCESSING_DATE", DbType="DateTime")]
		public System.Nullable<System.DateTime> ProcessingDate
		{
			get
			{
				return this._ACT_PROCESSING_DATE;
			}
			set
			{
				if ((this._ACT_PROCESSING_DATE != value))
				{
					this.OnProcessingDateChanging(value);
					this.SendPropertyChanging();
					this._ACT_PROCESSING_DATE = value;
					this.SendPropertyChanged("ProcessingDate");
					this.OnProcessingDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="EXT_ID", Storage="_EXT_ID", DbType="Int")]
		public System.Nullable<int> DetailId
		{
			get
			{
				return this._EXT_ID;
			}
			set
			{
				if ((this._EXT_ID != value))
				{
					this.OnDetailIdChanging(value);
					this.SendPropertyChanging();
					this._EXT_ID = value;
					this.SendPropertyChanged("DetailId");
					this.OnDetailIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Place_Action", Storage="_T_PLACE", ThisKey="PlaceId", OtherKey="ID", IsForeignKey=true)]
		public Place Place
		{
			get
			{
				return this._T_PLACE.Entity;
			}
			set
			{
				Place previousValue = this._T_PLACE.Entity;
				if (((previousValue != value) 
							|| (this._T_PLACE.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._T_PLACE.Entity = null;
						previousValue.Actions.Remove(this);
					}
					this._T_PLACE.Entity = value;
					if ((value != null))
					{
						value.Actions.Add(this);
						this._PLC_ID = value.ID;
					}
					else
					{
						this._PLC_ID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Place");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SaltedButter_Action", Storage="_T_SALTED_BUTTER", ThisKey="DetailId", OtherKey="ID", IsForeignKey=true)]
		public SaltedButter SaltedButter
		{
			get
			{
				return this._T_SALTED_BUTTER.Entity;
			}
			set
			{
				SaltedButter previousValue = this._T_SALTED_BUTTER.Entity;
				if (((previousValue != value) 
							|| (this._T_SALTED_BUTTER.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._T_SALTED_BUTTER.Entity = null;
						previousValue.Actions.Remove(this);
					}
					this._T_SALTED_BUTTER.Entity = value;
					if ((value != null))
					{
						value.Actions.Add(this);
						this._EXT_ID = value.ID;
					}
					else
					{
						this._EXT_ID = default(Nullable<int>);
					}
					this.SendPropertyChanged("SaltedButter");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Action", Storage="_User", ThisKey="UserId", OtherKey="ID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Actions.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Actions.Add(this);
						this._USR_ID = value.ID;
					}
					else
					{
						this._USR_ID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.T_SALTED_BUTTER")]
	public partial class SaltedButter : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SLT_ID;
		
		private bool _SLT_SALTED;
		
		private string _SLT_COMMENT;
		
		private string _SLT_PLATE;
		
		private System.Nullable<int> _PHO_ID;
		
		private EntitySet<Action> _T_ACTIONs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnSaltedChanging(bool value);
    partial void OnSaltedChanged();
    partial void OnCommentChanging(string value);
    partial void OnCommentChanged();
    partial void OnPlateChanging(string value);
    partial void OnPlateChanged();
    partial void OnPhotoChanging(System.Nullable<int> value);
    partial void OnPhotoChanged();
    #endregion
		
		public SaltedButter()
		{
			this._T_ACTIONs = new EntitySet<Action>(new Action<Action>(this.attach_T_ACTIONs), new Action<Action>(this.detach_T_ACTIONs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="SLT_ID", Storage="_SLT_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._SLT_ID;
			}
			set
			{
				if ((this._SLT_ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._SLT_ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="SLT_SALTED", Storage="_SLT_SALTED", DbType="Bit NOT NULL")]
		public bool Salted
		{
			get
			{
				return this._SLT_SALTED;
			}
			set
			{
				if ((this._SLT_SALTED != value))
				{
					this.OnSaltedChanging(value);
					this.SendPropertyChanging();
					this._SLT_SALTED = value;
					this.SendPropertyChanged("Salted");
					this.OnSaltedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="SLT_COMMENT", Storage="_SLT_COMMENT", DbType="NVarChar(300)")]
		public string Comment
		{
			get
			{
				return this._SLT_COMMENT;
			}
			set
			{
				if ((this._SLT_COMMENT != value))
				{
					this.OnCommentChanging(value);
					this.SendPropertyChanging();
					this._SLT_COMMENT = value;
					this.SendPropertyChanged("Comment");
					this.OnCommentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="SLT_PLATE", Storage="_SLT_PLATE", DbType="NVarChar(50)")]
		public string Plate
		{
			get
			{
				return this._SLT_PLATE;
			}
			set
			{
				if ((this._SLT_PLATE != value))
				{
					this.OnPlateChanging(value);
					this.SendPropertyChanging();
					this._SLT_PLATE = value;
					this.SendPropertyChanged("Plate");
					this.OnPlateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="PHO_ID", Storage="_PHO_ID", DbType="Int")]
		public System.Nullable<int> Photo
		{
			get
			{
				return this._PHO_ID;
			}
			set
			{
				if ((this._PHO_ID != value))
				{
					this.OnPhotoChanging(value);
					this.SendPropertyChanging();
					this._PHO_ID = value;
					this.SendPropertyChanged("Photo");
					this.OnPhotoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SaltedButter_Action", Storage="_T_ACTIONs", ThisKey="ID", OtherKey="DetailId")]
		internal EntitySet<Action> Actions
		{
			get
			{
				return this._T_ACTIONs;
			}
			set
			{
				this._T_ACTIONs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_T_ACTIONs(Action entity)
		{
			this.SendPropertyChanging();
			entity.SaltedButter = this;
		}
		
		private void detach_T_ACTIONs(Action entity)
		{
			this.SendPropertyChanging();
			entity.SaltedButter = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.T_USER")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Email;
		
		private string _Username;
		
		private string _Password;
		
		private System.DateTime _CreationDate;
		
		private System.Nullable<System.DateTime> _AlterationDate;
		
		private EntitySet<Action> _Actions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnUsernameChanging(string value);
    partial void OnUsernameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnCreationDateChanging(System.DateTime value);
    partial void OnCreationDateChanged();
    partial void OnAlterationDateChanging(System.Nullable<System.DateTime> value);
    partial void OnAlterationDateChanged();
    #endregion
		
		public User()
		{
			this._Actions = new EntitySet<Action>(new Action<Action>(this.attach_Actions), new Action<Action>(this.detach_Actions));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="USR_ID", Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="USR_EMAIL", Storage="_Email", DbType="NVarChar(50)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="USR_LOGIN", Storage="_Username", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string Username
		{
			get
			{
				return this._Username;
			}
			set
			{
				if ((this._Username != value))
				{
					this.OnUsernameChanging(value);
					this.SendPropertyChanging();
					this._Username = value;
					this.SendPropertyChanged("Username");
					this.OnUsernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="USR_PWD", Storage="_Password", DbType="NVarChar(10)")]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="USR_CREATION", Storage="_CreationDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreationDate
		{
			get
			{
				return this._CreationDate;
			}
			set
			{
				if ((this._CreationDate != value))
				{
					this.OnCreationDateChanging(value);
					this.SendPropertyChanging();
					this._CreationDate = value;
					this.SendPropertyChanged("CreationDate");
					this.OnCreationDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="USR_ALTER", Storage="_AlterationDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> AlterationDate
		{
			get
			{
				return this._AlterationDate;
			}
			set
			{
				if ((this._AlterationDate != value))
				{
					this.OnAlterationDateChanging(value);
					this.SendPropertyChanging();
					this._AlterationDate = value;
					this.SendPropertyChanged("AlterationDate");
					this.OnAlterationDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Action", Storage="_Actions", ThisKey="ID", OtherKey="UserId")]
		internal EntitySet<Action> Actions
		{
			get
			{
				return this._Actions;
			}
			set
			{
				this._Actions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Actions(Action entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Actions(Action entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
}
#pragma warning restore 1591
